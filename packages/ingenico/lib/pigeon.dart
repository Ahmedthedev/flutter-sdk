// Autogenerated from Pigeon (v1.0.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum Type {
  string,
  integer,
  numericstring,
  expirydate,
  booleanEnum,
  date,
}

enum PreferredInputType {
  integerKeyboard,
  stringKeyboard,
  phoneNumberKeyboard,
  emailAddressKeyboard,
  dateKeyboard,
}

enum ListType {
  text,
  list,
  currency,
  date,
  booleanEnum,
}

enum PaymentProductFieldDisplayElementType {
  integer,
  string,
  currency,
  percentage,
  uri,
}

enum ValidationType {
  expirationDate,
  emailAdress,
  fixedList,
  iban,
  length,
  luhn,
  range,
  regularExpression,
  type,
  termsAndConditions,
}

class SessionRequest {
  String? clientSessionId;
  String? customerId;
  String? clientApiUrl;
  String? assetBaseUrl;
  bool? environmentIsProduction;
  String? applicationIdentifier;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['clientSessionId'] = clientSessionId;
    pigeonMap['customerId'] = customerId;
    pigeonMap['clientApiUrl'] = clientApiUrl;
    pigeonMap['assetBaseUrl'] = assetBaseUrl;
    pigeonMap['environmentIsProduction'] = environmentIsProduction;
    pigeonMap['applicationIdentifier'] = applicationIdentifier;
    return pigeonMap;
  }

  static SessionRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SessionRequest()
      ..clientSessionId = pigeonMap['clientSessionId'] as String?
      ..customerId = pigeonMap['customerId'] as String?
      ..clientApiUrl = pigeonMap['clientApiUrl'] as String?
      ..assetBaseUrl = pigeonMap['assetBaseUrl'] as String?
      ..environmentIsProduction = pigeonMap['environmentIsProduction'] as bool?
      ..applicationIdentifier = pigeonMap['applicationIdentifier'] as String?;
  }
}

class SessionResponse {
  String? sessionId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['sessionId'] = sessionId;
    return pigeonMap;
  }

  static SessionResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SessionResponse()
      ..sessionId = pigeonMap['sessionId'] as String?;
  }
}

class PaymentContextRequest {
  String? sessionId;
  double? amountValue;
  String? currencyCode;
  String? countryCode;
  bool? isRecurring;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['sessionId'] = sessionId;
    pigeonMap['amountValue'] = amountValue;
    pigeonMap['currencyCode'] = currencyCode;
    pigeonMap['countryCode'] = countryCode;
    pigeonMap['isRecurring'] = isRecurring;
    return pigeonMap;
  }

  static PaymentContextRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentContextRequest()
      ..sessionId = pigeonMap['sessionId'] as String?
      ..amountValue = pigeonMap['amountValue'] as double?
      ..currencyCode = pigeonMap['currencyCode'] as String?
      ..countryCode = pigeonMap['countryCode'] as String?
      ..isRecurring = pigeonMap['isRecurring'] as bool?;
  }
}

class GetPaymentProductRequest {
  String? sessionId;
  String? paymentProductId;
  double? amountValue;
  String? currencyCode;
  String? countryCode;
  bool? isRecurring;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['sessionId'] = sessionId;
    pigeonMap['paymentProductId'] = paymentProductId;
    pigeonMap['amountValue'] = amountValue;
    pigeonMap['currencyCode'] = currencyCode;
    pigeonMap['countryCode'] = countryCode;
    pigeonMap['isRecurring'] = isRecurring;
    return pigeonMap;
  }

  static GetPaymentProductRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return GetPaymentProductRequest()
      ..sessionId = pigeonMap['sessionId'] as String?
      ..paymentProductId = pigeonMap['paymentProductId'] as String?
      ..amountValue = pigeonMap['amountValue'] as double?
      ..currencyCode = pigeonMap['currencyCode'] as String?
      ..countryCode = pigeonMap['countryCode'] as String?
      ..isRecurring = pigeonMap['isRecurring'] as bool?;
  }
}

class PaymentContextResponse {
  List<BasicPaymentProduct?>? basicPaymentProduct;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['basicPaymentProduct'] = basicPaymentProduct;
    return pigeonMap;
  }

  static PaymentContextResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentContextResponse()
      ..basicPaymentProduct = (pigeonMap['basicPaymentProduct'] as List<Object?>?)?.cast<BasicPaymentProduct?>();
  }
}

class BasicPaymentProduct {
  String? id;
  String? paymentMethod;
  String? paymentProductGroup;
  double? minAmount;
  double? maxAmount;
  bool? allowsRecurring;
  bool? allowsTokenization;
  bool? usesRedirectionTo3rdParty;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['paymentMethod'] = paymentMethod;
    pigeonMap['paymentProductGroup'] = paymentProductGroup;
    pigeonMap['minAmount'] = minAmount;
    pigeonMap['maxAmount'] = maxAmount;
    pigeonMap['allowsRecurring'] = allowsRecurring;
    pigeonMap['allowsTokenization'] = allowsTokenization;
    pigeonMap['usesRedirectionTo3rdParty'] = usesRedirectionTo3rdParty;
    return pigeonMap;
  }

  static BasicPaymentProduct decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return BasicPaymentProduct()
      ..id = pigeonMap['id'] as String?
      ..paymentMethod = pigeonMap['paymentMethod'] as String?
      ..paymentProductGroup = pigeonMap['paymentProductGroup'] as String?
      ..minAmount = pigeonMap['minAmount'] as double?
      ..maxAmount = pigeonMap['maxAmount'] as double?
      ..allowsRecurring = pigeonMap['allowsRecurring'] as bool?
      ..allowsTokenization = pigeonMap['allowsTokenization'] as bool?
      ..usesRedirectionTo3rdParty = pigeonMap['usesRedirectionTo3rdParty'] as bool?;
  }
}

class DisplayHintsPaymentItem {
  int? displayOrder;
  String? label;
  String? logoUrl;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['displayOrder'] = displayOrder;
    pigeonMap['label'] = label;
    pigeonMap['logoUrl'] = logoUrl;
    return pigeonMap;
  }

  static DisplayHintsPaymentItem decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DisplayHintsPaymentItem()
      ..displayOrder = pigeonMap['displayOrder'] as int?
      ..label = pigeonMap['label'] as String?
      ..logoUrl = pigeonMap['logoUrl'] as String?;
  }
}

class PaymentProduct {
  String? id;
  String? paymentMethod;
  String? paymentProductGroup;
  double? minAmount;
  double? maxAmount;
  bool? allowsRecurring;
  bool? allowsTokenization;
  bool? usesRedirectionTo3rdParty;
  DisplayHintsPaymentItem? displayHints;
  List<PaymentProductField?>? fields;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['paymentMethod'] = paymentMethod;
    pigeonMap['paymentProductGroup'] = paymentProductGroup;
    pigeonMap['minAmount'] = minAmount;
    pigeonMap['maxAmount'] = maxAmount;
    pigeonMap['allowsRecurring'] = allowsRecurring;
    pigeonMap['allowsTokenization'] = allowsTokenization;
    pigeonMap['usesRedirectionTo3rdParty'] = usesRedirectionTo3rdParty;
    pigeonMap['displayHints'] = displayHints == null ? null : displayHints!.encode();
    pigeonMap['fields'] = fields;
    return pigeonMap;
  }

  static PaymentProduct decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentProduct()
      ..id = pigeonMap['id'] as String?
      ..paymentMethod = pigeonMap['paymentMethod'] as String?
      ..paymentProductGroup = pigeonMap['paymentProductGroup'] as String?
      ..minAmount = pigeonMap['minAmount'] as double?
      ..maxAmount = pigeonMap['maxAmount'] as double?
      ..allowsRecurring = pigeonMap['allowsRecurring'] as bool?
      ..allowsTokenization = pigeonMap['allowsTokenization'] as bool?
      ..usesRedirectionTo3rdParty = pigeonMap['usesRedirectionTo3rdParty'] as bool?
      ..displayHints = pigeonMap['displayHints'] != null
          ? DisplayHintsPaymentItem.decode(pigeonMap['displayHints']!)
          : null
      ..fields = (pigeonMap['fields'] as List<Object?>?)?.cast<PaymentProductField?>();
  }
}

class PaymentProductField {
  String? id;
  Type? type;
  DisplayHintsProductFields? displayHints;
  DataRestrictions? dataRestrictions;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['type'] = type == null ? null : type!.index;
    pigeonMap['displayHints'] = displayHints == null ? null : displayHints!.encode();
    pigeonMap['dataRestrictions'] = dataRestrictions == null ? null : dataRestrictions!.encode();
    return pigeonMap;
  }

  static PaymentProductField decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentProductField()
      ..id = pigeonMap['id'] as String?
      ..type = pigeonMap['type'] != null
          ? Type.values[pigeonMap['type']! as int]
          : null
      ..displayHints = pigeonMap['displayHints'] != null
          ? DisplayHintsProductFields.decode(pigeonMap['displayHints']!)
          : null
      ..dataRestrictions = pigeonMap['dataRestrictions'] != null
          ? DataRestrictions.decode(pigeonMap['dataRestrictions']!)
          : null;
  }
}

class DisplayHintsProductFields {
  bool? alwaysShow;
  bool? obfuscate;
  int? displayOrder;
  String? label;
  String? placeholderLabel;
  String? link;
  String? mask;
  PreferredInputType? preferredInputType;
  Tooltip? tooltip;
  FormElement? formElement;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['alwaysShow'] = alwaysShow;
    pigeonMap['obfuscate'] = obfuscate;
    pigeonMap['displayOrder'] = displayOrder;
    pigeonMap['label'] = label;
    pigeonMap['placeholderLabel'] = placeholderLabel;
    pigeonMap['link'] = link;
    pigeonMap['mask'] = mask;
    pigeonMap['preferredInputType'] = preferredInputType == null ? null : preferredInputType!.index;
    pigeonMap['tooltip'] = tooltip == null ? null : tooltip!.encode();
    pigeonMap['formElement'] = formElement == null ? null : formElement!.encode();
    return pigeonMap;
  }

  static DisplayHintsProductFields decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DisplayHintsProductFields()
      ..alwaysShow = pigeonMap['alwaysShow'] as bool?
      ..obfuscate = pigeonMap['obfuscate'] as bool?
      ..displayOrder = pigeonMap['displayOrder'] as int?
      ..label = pigeonMap['label'] as String?
      ..placeholderLabel = pigeonMap['placeholderLabel'] as String?
      ..link = pigeonMap['link'] as String?
      ..mask = pigeonMap['mask'] as String?
      ..preferredInputType = pigeonMap['preferredInputType'] != null
          ? PreferredInputType.values[pigeonMap['preferredInputType']! as int]
          : null
      ..tooltip = pigeonMap['tooltip'] != null
          ? Tooltip.decode(pigeonMap['tooltip']!)
          : null
      ..formElement = pigeonMap['formElement'] != null
          ? FormElement.decode(pigeonMap['formElement']!)
          : null;
  }
}

class Tooltip {
  String? image;
  String? label;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['image'] = image;
    pigeonMap['label'] = label;
    return pigeonMap;
  }

  static Tooltip decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Tooltip()
      ..image = pigeonMap['image'] as String?
      ..label = pigeonMap['label'] as String?;
  }
}

class FormElement {
  ListType? type;
  List<ValueMap?>? valueMapping;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['type'] = type == null ? null : type!.index;
    pigeonMap['valueMapping'] = valueMapping;
    return pigeonMap;
  }

  static FormElement decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FormElement()
      ..type = pigeonMap['type'] != null
          ? ListType.values[pigeonMap['type']! as int]
          : null
      ..valueMapping = (pigeonMap['valueMapping'] as List<Object?>?)?.cast<ValueMap?>();
  }
}

class ValueMap {
  String? value;
  List<PaymentProductFieldDisplayElement?>? displayElements;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['value'] = value;
    pigeonMap['displayElements'] = displayElements;
    return pigeonMap;
  }

  static ValueMap decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ValueMap()
      ..value = pigeonMap['value'] as String?
      ..displayElements = (pigeonMap['displayElements'] as List<Object?>?)?.cast<PaymentProductFieldDisplayElement?>();
  }
}

class PaymentProductFieldDisplayElement {
  String? id;
  PaymentProductFieldDisplayElementType? type;
  String? value;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['type'] = type == null ? null : type!.index;
    pigeonMap['value'] = value;
    return pigeonMap;
  }

  static PaymentProductFieldDisplayElement decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentProductFieldDisplayElement()
      ..id = pigeonMap['id'] as String?
      ..type = pigeonMap['type'] != null
          ? PaymentProductFieldDisplayElementType.values[pigeonMap['type']! as int]
          : null
      ..value = pigeonMap['value'] as String?;
  }
}

class DataRestrictions {
  bool? isRequired;
  List<AbstractValidationRule?>? validationRules;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['isRequired'] = isRequired;
    pigeonMap['validationRules'] = validationRules;
    return pigeonMap;
  }

  static DataRestrictions decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return DataRestrictions()
      ..isRequired = pigeonMap['isRequired'] as bool?
      ..validationRules = (pigeonMap['validationRules'] as List<Object?>?)?.cast<AbstractValidationRule?>();
  }
}

class AbstractValidationRule {
  String? messageId;
  ValidationType? type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['messageId'] = messageId;
    pigeonMap['type'] = type == null ? null : type!.index;
    return pigeonMap;
  }

  static AbstractValidationRule decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AbstractValidationRule()
      ..messageId = pigeonMap['messageId'] as String?
      ..type = pigeonMap['type'] != null
          ? ValidationType.values[pigeonMap['type']! as int]
          : null;
  }
}

class PaymentRequest {
  Map<String?, String?>? values;
  String? paymentProductId;
  bool? tokenize;
  String? sessionId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['values'] = values;
    pigeonMap['paymentProductId'] = paymentProductId;
    pigeonMap['tokenize'] = tokenize;
    pigeonMap['sessionId'] = sessionId;
    return pigeonMap;
  }

  static PaymentRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentRequest()
      ..values = (pigeonMap['values'] as Map<Object?, Object?>?)?.cast<String?, String?>()
      ..paymentProductId = pigeonMap['paymentProductId'] as String?
      ..tokenize = pigeonMap['tokenize'] as bool?
      ..sessionId = pigeonMap['sessionId'] as String?;
  }
}

class PreparedPaymentRequest {
  String? encryptedFields;
  String? encodedClientMetaInfo;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['encryptedFields'] = encryptedFields;
    pigeonMap['encodedClientMetaInfo'] = encodedClientMetaInfo;
    return pigeonMap;
  }

  static PreparedPaymentRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreparedPaymentRequest()
      ..encryptedFields = pigeonMap['encryptedFields'] as String?
      ..encodedClientMetaInfo = pigeonMap['encodedClientMetaInfo'] as String?;
  }
}

class _ApiCodec extends StandardMessageCodec {
  const _ApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AbstractValidationRule) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is BasicPaymentProduct) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is GetPaymentProductRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentContextRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentContextResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentProduct) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentProductField) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentProductFieldDisplayElement) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else 
    if (value is PreparedPaymentRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else 
    if (value is SessionRequest) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else 
    if (value is SessionResponse) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else 
    if (value is ValueMap) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AbstractValidationRule.decode(readValue(buffer)!);
      
      case 129:       
        return BasicPaymentProduct.decode(readValue(buffer)!);
      
      case 130:       
        return GetPaymentProductRequest.decode(readValue(buffer)!);
      
      case 131:       
        return PaymentContextRequest.decode(readValue(buffer)!);
      
      case 132:       
        return PaymentContextResponse.decode(readValue(buffer)!);
      
      case 133:       
        return PaymentProduct.decode(readValue(buffer)!);
      
      case 134:       
        return PaymentProductField.decode(readValue(buffer)!);
      
      case 135:       
        return PaymentProductFieldDisplayElement.decode(readValue(buffer)!);
      
      case 136:       
        return PaymentRequest.decode(readValue(buffer)!);
      
      case 137:       
        return PreparedPaymentRequest.decode(readValue(buffer)!);
      
      case 138:       
        return SessionRequest.decode(readValue(buffer)!);
      
      case 139:       
        return SessionResponse.decode(readValue(buffer)!);
      
      case 140:       
        return ValueMap.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class Api {
  /// Constructor for [Api].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  Api({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ApiCodec();

  Future<SessionResponse> createClientSession(SessionRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api.createClientSession', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as SessionResponse?)!;
    }
  }

  Future<void> _passThrough(PaymentProductField arg_a, BasicPaymentProduct arg_b, AbstractValidationRule arg_c, ValueMap arg_d, PaymentProductFieldDisplayElement arg_e) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api._passThrough', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_a, arg_b, arg_c, arg_d, arg_e]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<PaymentContextResponse> getBasicPaymentItems(PaymentContextRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api.getBasicPaymentItems', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as PaymentContextResponse?)!;
    }
  }

  Future<PaymentProduct> getPaymentProduct(GetPaymentProductRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api.getPaymentProduct', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as PaymentProduct?)!;
    }
  }

  Future<PreparedPaymentRequest> preparePaymentRequest(PaymentRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api.preparePaymentRequest', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as PreparedPaymentRequest?)!;
    }
  }
}
